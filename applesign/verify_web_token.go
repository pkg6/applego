package applesign

import (
	"context"
	"github.com/pkg6/go-requests"
	"net/url"
)

// WebValidationTokenRequest is based off of https://developer.apple.com/documentation/signinwithapplerestapi/generate_and_validate_tokens
type WebValidationTokenRequest struct {
	// ClientID is the "Services ID" value that you get when navigating to your "sign in with Apple"-enabled service ID
	ClientID string
	// ClientSecret is secret generated as a JSON Web Token that uses the secret key generated by the WWDR portal.
	// It can also be generated using the GenerateClientSecret function provided in this package
	ClientSecret string
	// Code is the authorization code received from your applicationâ€™s user agent.
	// The code is single use only and valid for five minutes.
	Code string
	// RedirectURI is the destination URI the code was originally sent to.
	// Redirect URLs must be registered with Apple. You can register up to 10. Apple will throw an error with IP address
	// URLs on the authorization screen, and will not let you add localhost in the developer portal.
	RedirectURI string
}

func VerifyWebToken(ctx context.Context, reqBody WebValidationTokenRequest) (*ValidationTokenResponse, error) {
	resp := new(ValidationTokenResponse)
	data := url.Values{}
	data.Set("client_id", reqBody.ClientID)
	data.Set("client_secret", reqBody.ClientSecret)
	data.Set("code", reqBody.Code)
	data.Set("redirect_uri", reqBody.RedirectURI)
	data.Set("grant_type", "authorization_code")
	_, err := requests.New().AsForm().PostD(ctx, ValidationURL, data, &resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
